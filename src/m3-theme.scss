// This file was generated by running 'ng generate @angular/material:m3-theme'.
// Proceed with caution if making changes to this file.

@use 'sass:map';
@use '@angular/material' as mat;

// Note: Color palettes are generated from primary: #F77F00, secondary: #2A7221, tertiary: #DBD8AE, neutral: #EEF2E5
$_palettes: (
  primary: (
    0: #000000,
    10: #301400,
    20: #502500,
    25: #602e00,
    30: #713700,
    35: #834000,
    40: #954a00,
    50: #ba5e00,
    60: #e07300,
    70: #ff8e2f,
    80: #ffb784,
    90: #ffdcc6,
    95: #ffede4,
    98: #fff8f5,
    99: #fffbff,
    100: #ffffff,
  ),
  secondary: (
    0: #000000,
    10: #002200,
    20: #003a01,
    25: #004601,
    30: #025302,
    35: #15600f,
    40: #246c1c,
    50: #3e8633,
    60: #58a14a,
    70: #72bd62,
    80: #8dd97b,
    90: #a8f694,
    95: #caffb9,
    98: #edffe2,
    99: #f7ffee,
    100: #ffffff,
  ),
  tertiary: (
    0: #000000,
    10: #1d1d03,
    20: #323214,
    25: #3e3d1e,
    30: #494829,
    35: #555433,
    40: #61603e,
    50: #7a7955,
    60: #94926d,
    70: #afad86,
    80: #cbc89f,
    90: #e8e4ba,
    95: #f6f3c7,
    98: #fffbcf,
    99: #fffbff,
    100: #ffffff,
  ),
  neutral: (
    0: #000000,
    4: #0a0c08,
    6: #0e110d,
    10: #181d15,
    12: #1c2119,
    17: #272c23,
    20: #2d3229,
    22: #31362d,
    24: #363b32,
    25: #383d34,
    30: #44483f,
    35: #4f544a,
    40: #5b6056,
    50: #74796e,
    60: #8e9287,
    70: #a8ada1,
    80: #c4c8bc,
    87: #d8dccf,
    90: #e0e4d7,
    92: #e6eadd,
    94: #ebefe2,
    95: #eef2e5,
    96: #f1f5e8,
    98: #f7fbee,
    99: #fafef1,
    100: #ffffff,
  ),
  neutral-variant: (
    0: #000000,
    10: #28180d,
    20: #3f2c20,
    25: #4b372a,
    30: #574335,
    35: #634e40,
    40: #705a4b,
    50: #8a7263,
    60: #a68c7b,
    70: #c1a695,
    80: #dec1af,
    90: #fbddca,
    95: #ffede4,
    98: #fff8f5,
    99: #fffbff,
    100: #ffffff,
  ),
  error: (
    0: #000000,
    10: #410002,
    20: #690005,
    25: #7e0007,
    30: #93000a,
    35: #a80710,
    40: #ba1a1a,
    50: #de3730,
    60: #ff5449,
    70: #ff897d,
    80: #ffb4ab,
    90: #ffdad6,
    95: #ffedea,
    98: #fff8f7,
    99: #fffbff,
    100: #ffffff,
  ),
);

$_rest: (
  secondary: map.get($_palettes, secondary),
  neutral: map.get($_palettes, neutral),
  neutral-variant: map.get($_palettes, neutral-variant),
  error: map.get($_palettes, error),
);
$_primary: map.merge(map.get($_palettes, primary), $_rest);
$_tertiary: map.merge(map.get($_palettes, tertiary), $_rest);

$light-theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: $_primary,
    tertiary: $_tertiary,
  ),
  density: (
    scale: 0,
  ),
));
$dark-theme: mat.define-theme((
  color: (
    theme-type: dark,
    primary: $_primary,
    tertiary: $_tertiary,
  )
));

@mixin themeComponents($theme, $allComponentColors) {
  @if($allComponentColors){
    @include mat.all-component-colors($theme);
  }

  .primary {
    @include mat.button-color($theme, $color-variant: primary);
  }
}

@mixin materialRoleColorToVariable($theme){
  --primary: #{mat.get-theme-color($theme, primary)};
  --on-primary: #{mat.get-theme-color($theme, on-primary)};
  --primary-container: #{mat.get-theme-color($theme, primary-container)};
  --on-primary-container: #{mat.get-theme-color($theme, on-primary-container)};
  --primary-fixed: #{mat.get-theme-color($theme, primary-fixed)};
  --primary-fixed-dim: #{mat.get-theme-color($theme, primary-fixed-dim)};
  --on-primary-fixed: #{mat.get-theme-color($theme, on-primary-fixed)};
  --on-primary-fixed-variant: #{mat.get-theme-color($theme, on-primary-fixed-variant)};
  --secondary: #{mat.get-theme-color($theme, secondary)};
  --on-secondary: #{mat.get-theme-color($theme, on-secondary)};
  --secondary-container: #{mat.get-theme-color($theme, secondary-container)};
  --on-secondary-container: #{mat.get-theme-color($theme, on-secondary-container)};
  --secondary-fixed: #{mat.get-theme-color($theme, secondary-fixed)};
  --secondary-fixed-dim: #{mat.get-theme-color($theme, secondary-fixed-dim)};
  --on-secondary-fixed: #{mat.get-theme-color($theme, on-secondary-fixed)};
  --on-secondary-fixed-variant: #{mat.get-theme-color($theme, on-secondary-fixed-variant)};
  --tertiary: #{mat.get-theme-color($theme, tertiary)};
  --on-tertiary: #{mat.get-theme-color($theme, on-tertiary)};
  --tertiary-container: #{mat.get-theme-color($theme, tertiary-container)};
  --on-tertiary-container: #{mat.get-theme-color($theme, on-tertiary-container)};
  --tertiary-fixed: #{mat.get-theme-color($theme, tertiary-fixed)};
  --tertiary-fixed-dim: #{mat.get-theme-color($theme, tertiary-fixed-dim)};
  --on-tertiary-fixed: #{mat.get-theme-color($theme, on-tertiary-fixed)};
  --on-tertiary-fixed-variant: #{mat.get-theme-color($theme, on-tertiary-fixed-variant)};
  --error: #{mat.get-theme-color($theme, error)};
  --on-error: #{mat.get-theme-color($theme, on-error)};
  --error-container: #{mat.get-theme-color($theme, error-container)};
  --on-error-container: #{mat.get-theme-color($theme, on-error-container)};
  --surface-dim: #{mat.get-theme-color($theme, surface-dim)};
  --surface: #{mat.get-theme-color($theme, surface)};
  --surface-bright: #{mat.get-theme-color($theme, surface-bright)};
  --surface-container-lowest: #{mat.get-theme-color($theme, surface-container-lowest)};
  --surface-container-low: #{mat.get-theme-color($theme, surface-container-low)};
  --surface-container: #{mat.get-theme-color($theme, surface-container)};
  --surface-container-high: #{mat.get-theme-color($theme, surface-container-high)};
  --surface-container-highest: #{mat.get-theme-color($theme, surface-container-highest)};
  --on-surface: #{mat.get-theme-color($theme, on-surface)};
  --on-surface-variant: #{mat.get-theme-color($theme, on-surface-variant)};
  --outline: #{mat.get-theme-color($theme, outline)};
  --outline-variant: #{mat.get-theme-color($theme, outline-variant)};
  --inverse-surface: #{mat.get-theme-color($theme, inverse-surface)};
  --inverse-on-surface: #{mat.get-theme-color($theme, inverse-on-surface)};
  --inverse-primary: #{mat.get-theme-color($theme, inverse-primary)};
  --scrim: #{mat.get-theme-color($theme, scrim)};
  --shadow: #{mat.get-theme-color($theme, shadow)};
}


:root {
  @include mat.all-component-themes($light-theme);
  @include themeComponents($light-theme, false);
  @include materialRoleColorToVariable($light-theme);
}

.dark {
  @include themeComponents($dark-theme, true);
  @include materialRoleColorToVariable($dark-theme);
}
